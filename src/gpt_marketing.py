import io
import os
import pandas as pd
from gpt_asker import GPTAsker
from dotenv import load_dotenv


from visual.markdown_formatter import MarkdownFormatter

# Load environment variables from the .env file located in ./.conf/
load_dotenv(dotenv_path=os.path.join(os.path.dirname(__file__), '../.conf/.env'))


class GPTMarketing:
    def __init__(self):
        self._gpt_asker = GPTAsker()
        self._language = os.getenv('LANGUAGE', "spanish")

    def analyze_csv_text(self, given_prompt, csv_text, analysis_type):
        """
        Analyzes the given CSV text and returns conclusions based on the specified analysis type.

        Args:
            csv_text (str): The CSV content as a string.
            analysis_type (str): The type of analysis to perform. Should be one of 'marketing', 'sales', 'costs'.

        Returns:
            str: The conclusions generated by GPT.
        """
        if analysis_type not in ['marketing', 'sales', 'costs']:
            raise ValueError("Invalid analysis type. Choose from 'marketing', 'sales', 'costs'.")

        # Load the CSV data into a DataFrame
        # csv_data = io.StringIO(csv_text)
        # df = pd.read_csv(csv_data)
        # csv_string = df.to_csv(index=False)

        # Generate the prompt
        prompt_1 = f"Analyze the following data for {analysis_type} insights and actions:"
        prompt_2 = f"\n\nThe user asked for: {given_prompt} and "
        prompt_3 = f"result was:\n\n{csv_text}\n\n"
        prompt_4 = f"Provide actionable insights and conclusions. Give the answer in markdown format with titles and subtitles in {self._language}."
        prompt = prompt_1 + prompt_2 + prompt_3 + prompt_4

        # Get the response from GPT
        response = self._gpt_asker.send_prompt(prompt)

        return response


# Example usage
if __name__ == "__main__":
    gpt_marketing = GPTMarketing()
    formater = MarkdownFormatter()
    given_prompt = """
        PROMPT 1: Necesito que hagas una tabla de doble entrada, donde las columnas seran los dias de la semana (lunes, martes, etc) y las filas seran los a\u00f1os desde 2019 hasta 2023 y cada celda sera la suma de reservas hechas por cada dia. Y al final agrega una columna que se llame total que tenga la suma de todas las reservas de ese a\u00f1o.
        PROMPT 2: Necesito una tabla que tenga los meses en las columnas (ene, feb, mar, etc) y los a\u00f1os en las filas que muestre por a\u00f1o la cantidad de reservas realizadas en cada mes de ese a\u00f1o
    """
    csv_text = """
        ANSWER 1: a\u00f1o,lunes,martes,miercoles,jueves,viernes,sabado,domingo,total\r\n2020,332,342,385,603,872,849,425,3808\r\n2021,718,490,325,650,1302,3400,3003,9888\r\n2022,531,104,201,244,632,2091,2132,5935\r\n2023,326,194,144,231,715,2138,1931,5679\r\n
        ANSWER 2: a\u00f1o,ene,feb,mar,abr,may,jun,jul,ago,sep,oct,nov,dic\r\n2020,0,0,0,0,0,0,0,379,698,1358,948,425\r\n2021,466,938,596,370,604,1228,2125,1410,488,824,449,390\r\n2022,328,555,427,406,64,594,903,520,504,844,393,397\r\n2023,539,581,114,576,603,559,655,478,396,639,47,492\r\n2024,238,234,427,111,203,344,200,6,4,2,1,0\r\n
    """
    conclusions = gpt_marketing.analyze_csv_text(given_prompt, csv_text, 'marketing')
    
    formater.format_markdown(conclusions)
